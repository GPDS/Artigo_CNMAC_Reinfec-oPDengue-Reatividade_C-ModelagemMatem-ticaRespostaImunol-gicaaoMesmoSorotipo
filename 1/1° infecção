import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import random as rd
import time

def graph_generator_4(eixo_x,eixo_y,valor,t,dados2,nome):
    cores = [
    '#1f77b4', # azul
    '#ff7f0e', # laranja
    '#2ca02c', # verde
    '#d62728', # vermelho
    '#9467bd', # roxo
    '#8c564b', # marrom
    '#e377c2', # rosa
    '#7f7f7f', # cinza
    '#bcbd22', # amarelo
    '#17becf', # azul claro
    '#aec7e8', # azul claro (diferente)  #adicionar novas cores caso o tamanho do vetor do parâmetro seja >10
    ]
    fig, ax = plt.subplots()
    ax.set_facecolor("#FFFFFF")
    plt.subplots_adjust(right=0.97, top=0.97)
    plt.xlabel(eixo_x, fontsize = 12, labelpad = 4)
    plt.ylabel(eixo_y,  fontsize = 12, labelpad = 6)
    for i in range(len(valor)):
        plt.plot(t,dados2[i,:,0],cores[i],label = 'tau='+str(valor[i]),linewidth = '1.9')
    # leg = ax.legend()
    plt.grid(color = 'gray', linestyle = '--', linewidth = 0.15)
    name = nome + '.png'
    plt.savefig(name,format='png')
    return 0

time.time()
wks_s = np.array([1.0, 1.96, 2.425, 3.63])           #% da população de monócitos ao longo da gravidez em relação a não grávida
wks_z = np.array([1.0, 0.81, 0.64, 0.57])            #% da população de linfócitos ao longo da gravidez em relação a não grávida
wks_taxa = np.array([1.0, 0.5963, 0.5611, 1.0704])   #% da produção de linfócitos-T com o mesmo estímulo
a_wks = np.array([0.001, 0.002, 0.003])              #taxa de invasão bem-sucedida em um monócito susceptível

wks_mu = 80 * wks_s                                 #monócitos produzidos/dia.uL
wks_eta = 0.265 * wks_z                              #linfo-T produzidos/dia.uL para equilíbrio de 2000 linfo-T na ausência de infecção
alpha = 1/3                                        #período de vida de um monócito em dias
beta = 3.5                                         #taxa de mortalidade dos monóctios infectados
gamma = 0.8                                          #taxa de liberação de vírus
k = 20                                               #taxa de multiplicação de vírus
nu = 0.001                                           #taxa de eliminação de monócitos infectados
delta = 1/365                                       #período de vida de linfo-T
wks_c = 0.01 * wks_taxa                              #estímulo de produção de linfócitos-T pela densidade de monócitos infectados
wks_d = 0.03 * wks_taxa                              #estímulo de produção de linfócitos-T pelos contatos com monócitos infectados
wks_beta1 = beta + wks_eta * nu / delta
wks_c1 = wks_c + wks_d * wks_eta / delta         #taxa efetiva de estímulo e produção de linfócitos T ajustada pelo seu tempo de vida.

phi = 3e-10                       #Taxa de neutralização de anticorpos
sigma = 0.2                         #Taxa de recuperação per capita de monócitos infectados
mon_lambda = 3.5                    #Taxa de mortalidade dos monócitos infectados &
rho = 6.7e3                      #Taxa de produção de partículas de vírus
#chi = 5                             #Taxa de eliminação do vírus
xi = 8e-13                        #Efeito de não neutralização do anticorpo específico da cepa
tau = 0.3                          #Proliferação dos linfócitos T devido a reatividade cruzada, r utilizado para medir a intensidade e a eficácia da resposta imune
K_b = 40                            #Taxa de ativação de linfócitos B
alpha_b = 105                       #Taxa de proliferação dos linfócitos B
mu_b = 0.02                         #Taxa de mortalidade de linfócitos B
K_cel_plas = 10e-8                  #Recrutamento de células plasmáticas
Kp = 1.3e4                       #Capacidade de transporte das células plasmáticas
r_cel_plas = 1                      #Taxa de divisão das células plasmáticas
N_anticorpo = 10e-2                #Taxa de produção de anticorpos
d_anticorpo = 0.07                  #Taxa de mortalidade do anticorpo
theta = 10e-6        #Taxa de ativação das células B
mub = 0.2                           #Taxa de mortalidade dos linfócitos B

h = 0.01                            #parâmetro de precisão para método numérico de Runge-Kutta
h1 = h/2                            #parâmetro intermediário de precisão para método numérico de Runge-Kutta
t = np.arange(0, 10+h, h)           #vetor de tempo, até 10 dias
time = len(t)
valores_tau = [0.4,0.3,0.2,0.1,0.01,0.001, 10e-5, 10e-6, 10e-7,10e-8,0] #modificar aqui o parâmetro que se deseja variar
pregnancy = len(valores_tau)
kutta = 4


s = np.zeros((pregnancy,time,kutta))
v = np.zeros((pregnancy,time,kutta))
i = np.zeros((pregnancy,time,kutta))
z = np.zeros((pregnancy,time,kutta))
b = np.zeros((pregnancy,time,kutta))
b0 = np.zeros((pregnancy,time,kutta))
#p = np.zeros((pregnancy,time,kutta))
a = np.zeros((pregnancy,time,kutta))

ds = np.zeros((pregnancy,time - 1,kutta))
dv = np.zeros((pregnancy,time - 1,kutta))
di = np.zeros((pregnancy,time - 1,kutta))
dz = np.zeros((pregnancy,time - 1,kutta))
db = np.zeros((pregnancy,time - 1,kutta))
db0 = np.zeros((pregnancy,time - 1,kutta))
#dp = np.zeros((pregnancy,time - 1,kutta))
da = np.zeros((pregnancy,time - 1,kutta))

incremento_s = np.zeros((pregnancy,time))
incremento_i = np.zeros((pregnancy,time))
incremento_v = np.zeros((pregnancy,time))
incremento_z = np.zeros((pregnancy,time))
incremento_b = np.zeros((pregnancy,time))
incremento_b0 = np.zeros((pregnancy,time))
#incremento_p = np.zeros((pregnancy,time))
incremento_a = np.zeros((pregnancy,time))


s[:,0,0] = 250
i[:,0,0] = 10
v[:,0,0] = 165
z[:,0,0] = 2000
b[:,0,0] = 2*10e3
b0[:,0,0] = 0
#p[:,0,0] = 0
a[:,0,0] = 0


for w in range(pregnancy):
    for n in range(time - 1):
        for r in range(kutta):

            ds[w,n,r] = wks_mu[0] + i[w,n,r] * sigma - alpha * s[w,n,r] - (a_wks[2] * s[w,n,r] * v[w,n,r])/(1+phi*a[w,n,r])
            di[w,n,r] = (a_wks[2] * s[w,n,r] * v[w,n,r])/(1+phi*a[w,n,r]) - sigma*i[w,n,r] - beta * i[w,n,r] - nu * i[w,n,r] * z[w,n,r] #(sigma - mon_lambda)
            dv[w,n,r] = k * i[w,n,r] - gamma * v[w,n,r]  - (a_wks[2] * s[w,n,r] * v[w,n,r])/(1+phi*a[w,n,r]) - xi * v[w,n,r] * a[w,n,r] # (rho + psi)
            dz[w,n,r] = wks_c1[0] * i[w,n,r] + wks_d[0] * i[w,n,r] * z[w,n,r] - delta * z[w,n,r]
            db[w,n,r] = - theta * b[w,n,r] * v[w,n,r] - mub * b[w,n,r]
            db0 [w,n,r] = theta * b[w,n,r] * v[w,n,r] - K_cel_plas * b0[w,n,r] * v[w,n,r] - mub * b0[w,n,r]
            #dp[w,n,r] = r_cel_plas * p[w,n,r] * (1- p[w,n,r]/Kp) + K_cel_plas * v[w,n,r] * b0[w,n,r]
            da[w,n,r] = N_anticorpo * b0[w,n,r] - d_anticorpo * a[w,n,r]

            if r < (kutta - 1):
                s[w,n,r+1] = s[w,n,r] + h1 * ds[w,n,r]
                i[w,n,r+1] = i[w,n,r] + h1 * di[w,n,r]
                v[w,n,r+1] = v[w,n,r] + h1 * dv[w,n,r]
                z[w,n,r+1] = z[w,n,r] + h1 * dz[w,n,r]
                b[w,n,r+1] = b[w,n,r] + h1 * db[w,n,r]
                b0[w,n,r+1] = b0[w,n,r] + h1 * db0[w,n,r]
                #p[w,n,r+1] = p[w,n,r] + h1 * dp[w,n,r]
                a[w,n,r+1] = a[w,n,r] + h1 * da[w,n,r]

        incremento_s[w,n] = (h/6) * (ds[w,n,0] + 2 * ds[w,n,1] + 2 * ds[w,n,2] + ds[w,n,3])
        incremento_i[w,n] = (h/6) * (di[w,n,0] + 2 * di[w,n,1] + 2 * di[w,n,2] + di[w,n,3])
        incremento_v[w,n] = (h/6) * (dv[w,n,0] + 2 * dv[w,n,1] + 2 * dv[w,n,2] + dv[w,n,3])
        incremento_z[w,n] = (h/6) * (dz[w,n,0] + 2 * dz[w,n,1] + 2 * dz[w,n,2] + dz[w,n,3])
        incremento_b[w,n] = (h/6) * (db[w,n,0] + 2 * db[w,n,1] + 2 * db[w,n,2] + db[w,n,3])
        incremento_b0[w,n] = (h/6) * (db0[w,n,0] + 2 * db0[w,n,1] + 2 * db0[w,n,2] + db0[w,n,3])
        #incremento_p[w,n] = (h/6) * (dp[w,n,0] + 2 * dp[w,n,1] + 2 * dp[w,n,2] + dp[w,n,3])
        incremento_a[w,n] = (h/6) * (da[w,n,0] + 2 * da[w,n,1] + 2 * da[w,n,2] + da[w,n,3])

        s[w,n+1,0] = s[w,n,0] + incremento_s[w,n]
        i[w,n+1,0] = i[w,n,0] + incremento_i[w,n]
        v[w,n+1,0] = v[w,n,0] + incremento_v[w,n]
        z[w,n+1,0] = z[w,n,0] + incremento_z[w,n]
        b[w,n+1,0] = b[w,n,0] + incremento_b[w,n]
        b0[w,n+1,0] = b0[w,n,0] + incremento_b0[w,n]
        #p[w,n+1,0] = p[w,n,0] + incremento_p[w,n]
        a[w,n+1,0] = a[w,n,0] + incremento_a[w,n]
